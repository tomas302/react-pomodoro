{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["playButton","react_default","a","createElement","title","className","pauseButton","SESSION","accurateInterval","fn","time","cancel","nextAt","timeout","wrapper","Date","getTime","setTimeout","clearTimeout","TimerLengthControl","id","this","props","class","label","onClick","clickDecrement","length","clickIncrement","Component","Timer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","timer","intervalID","sessionLength","breakLength","running","timerType","startStop","bind","assertThisInitialized","beginCountdown","reduceTimer","phaseControl","reset","clockify","startStopButton","changeBreakLength","changeSessionLength","setState","_this2","audioBeep","play","pause","currentTime","minutes","Math","floor","seconds","amount","newLength","_this3","Timer_TimerLengthControl","preload","src","ref","audio","rel","target","href","App","Timer_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.545de14f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst playButton = <i title=\"Start\" className=\"fas fa-play\"></i>;\r\nconst pauseButton = <i title=\"Stop\" className=\"fas fa-pause\"></i>;\r\n\r\n// Timer Types\r\nconst SESSION = 0;\r\nconst BREAK = 1;\r\n\r\n// Accurate_Interval.js \r\n// Thanks Squeege! For the elegant answer provided to this question: \r\n// http://stackoverflow.com/questions/8173580/setinterval-timing-slowly-drifts-away-from-staying-accurate\r\n// Github: https://gist.github.com/Squeegy/1d99b3cd81d610ac7351\r\n// Slightly modified to accept 'normal' interval/timeout format (func, time). \r\n// From: https://codepen.io/no_stack_dub_sack/pen/VKJGKd\r\n\r\nconst accurateInterval = function(fn, time) {\r\n    var cancel, nextAt, timeout, wrapper;\r\n    nextAt = new Date().getTime() + time;\r\n    timeout = null;\r\n    wrapper = function() {\r\n      nextAt += time;\r\n      timeout = setTimeout(wrapper, nextAt - new Date().getTime());\r\n      return fn();\r\n    };\r\n    cancel = function() {\r\n      return clearTimeout(timeout);\r\n    };\r\n    timeout = setTimeout(wrapper, nextAt - new Date().getTime());\r\n    return {\r\n      cancel: cancel\r\n    };\r\n};\r\n\r\nclass TimerLengthControl extends Component {\r\n    render() {\r\n        return <div className=\"length-control\">\r\n                    <div id={ this.props.class + \"-label\" }>{ this.props.label } Length</div>\r\n                    <button id={ this.props.class + \"-decrement\"} onClick={ this.props.clickDecrement }><i className=\"fas fa-arrow-down\"></i></button>\r\n                    <div id={ this.props.class + \"-length\"}>{ this.props.length }</div>\r\n                    <button id={ this.props.class + \"-increment\"} onClick={ this.props.clickIncrement }><i className=\"fas fa-arrow-up\"></i></button>\r\n                </div>;\r\n    }\r\n}\r\n\r\nexport default class Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timer: 1500,\r\n            intervalID: '',\r\n            sessionLength: 25,\r\n            breakLength: 5,\r\n            running: false,\r\n            timerType: SESSION\r\n        };\r\n\r\n        this.startStop = this.startStop.bind(this);\r\n        this.beginCountdown = this.beginCountdown.bind(this);\r\n        this.reduceTimer = this.reduceTimer.bind(this);\r\n        this.phaseControl = this.phaseControl.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.clockify = this.clockify.bind(this);\r\n        this.startStopButton = this.startStopButton.bind(this);\r\n        this.changeBreakLength = this.changeBreakLength.bind(this);\r\n        this.changeSessionLength = this.changeSessionLength.bind(this);\r\n    }\r\n\r\n    startStop() {\r\n        if (this.state.running) {\r\n            this.state.intervalID.cancel();\r\n            this.setState({ running: false });\r\n        } else {\r\n            this.beginCountdown();\r\n        }\r\n    }\r\n\r\n    beginCountdown() {\r\n        this.setState({\r\n            intervalID: accurateInterval(() => {\r\n                this.reduceTimer();\r\n                this.phaseControl();\r\n            }, 1000),\r\n            running: true\r\n        });\r\n    }\r\n\r\n    reduceTimer() {\r\n        this.setState({ timer: this.state.timer - 1 });\r\n    }\r\n\r\n    phaseControl() {\r\n        if (this.state.timer === -1) {\r\n            this.setState({\r\n                timer: (this.state.timerType === SESSION) ? this.state.breakLength * 60 : this.state.sessionLength * 60,\r\n                timerType: (this.state.timerType === SESSION) ? BREAK : SESSION\r\n            });\r\n            this.audioBeep.play();\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        if (this.state.intervalID)\r\n            this.state.intervalID.cancel();\r\n        this.setState({\r\n            timer: 1500,\r\n            sessionLength: 25,\r\n            breakLength: 5,\r\n            running: false,\r\n            timerType: SESSION\r\n        });\r\n        this.audioBeep.pause();\r\n        this.audioBeep.currentTime = 0;\r\n    }\r\n    \r\n    clockify() {\r\n        let minutes = Math.floor(this.state.timer / 60);\r\n        let seconds = this.state.timer - minutes * 60;\r\n        seconds = seconds < 10 ? '0' + seconds : seconds;\r\n        minutes = minutes < 10 ? '0' + minutes : minutes;\r\n        return minutes + ':' + seconds;\r\n    }\r\n\r\n    startStopButton() {\r\n        return (this.state.running) ? pauseButton : playButton ;\r\n    }\r\n\r\n    changeBreakLength(amount) {\r\n        if (this.state.timerType === BREAK) {\r\n            if (this.state.running) {\r\n                return;\r\n            } else {\r\n                let newLength = this.state.breakLength + amount;\r\n                newLength = (newLength > 60 || newLength < 1) ? this.state.breakLength : newLength;\r\n                this.setState({\r\n                    breakLength: newLength,\r\n                    timer: newLength * 60\r\n                });\r\n            }\r\n        } else {\r\n            let newLength = this.state.breakLength + amount;\r\n            newLength = (newLength > 60 || newLength < 1) ? this.state.breakLength : newLength;\r\n            this.setState({\r\n                breakLength: newLength\r\n            });\r\n        }\r\n    }\r\n\r\n    changeSessionLength(amount) {\r\n        if (this.state.timerType === SESSION) {\r\n            if (this.state.running) {\r\n                return;\r\n            } else {\r\n                let newLength = this.state.sessionLength + amount;\r\n                newLength = (newLength > 60 || newLength < 1) ? this.state.sessionLength : newLength;\r\n                this.setState({\r\n                    sessionLength: newLength,\r\n                    timer: newLength * 60\r\n                });\r\n            }\r\n        } else {\r\n            let newLength = this.state.sessionLength + amount;\r\n            newLength = (newLength > 60 || newLength < 1) ? this.state.sessionLength : newLength;\r\n            this.setState({\r\n                sessionLength: newLength\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return <div id=\"timer-wrapper\">\r\n            <h1>Pomodoro Clock</h1>\r\n            <div id=\"timer-length\">\r\n                <TimerLengthControl \r\n                    class=\"break\"\r\n                    label=\"Break\"\r\n                    length={ this.state.breakLength }\r\n                    clickDecrement={ () => this.changeBreakLength(-1) }\r\n                    clickIncrement={ () => this.changeBreakLength(1) }\r\n                />\r\n                <TimerLengthControl \r\n                    class=\"session\"\r\n                    label=\"Session\"\r\n                    length={ this.state.sessionLength }\r\n                    clickDecrement={ () => this.changeSessionLength(-1) }\r\n                    clickIncrement={ () => this.changeSessionLength(1) }\r\n                />\r\n            </div>\r\n            <div id=\"timer\">\r\n                <h2 id=\"timer-label\">{ (this.state.timerType === SESSION) ? \"Session\" : \"Break\" }</h2>\r\n                <div id=\"time-left\">\r\n                    { this.clockify() }\r\n                </div>\r\n            </div>\r\n            <button id=\"start_stop\" onClick={ this.startStop }>{ this.startStopButton() }</button>\r\n            <button id=\"reset\" onClick={ this.reset }><i title=\"Reset\" className=\"fas fa-sync-alt\"></i></button>\r\n            <audio id=\"beep\" preload=\"auto\" \r\n                src=\"https://goo.gl/65cBl1\"\r\n                ref={(audio) => { this.audioBeep = audio; }} />\r\n            <div id=\"footer\">Coded by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/tomas302\">tomas302</a></div>\r\n        </div>;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Timer from './Timer';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Timer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}